###############################################################################
#
# IAR C/C++ Compiler V7.10.1.973/W32 for MSP430           26/Sep/2017  12:43:00
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\ncsu1.uncanet.unca.edu\home\jchesebr\Desktop\Project 04\main.c
#    Command line  =  
#        -f C:\Users\jchesebr\AppData\Local\Temp\EWEBCB.tmp
#        ("\\ncsu1.uncanet.unca.edu\home\jchesebr\Desktop\Project 04\main.c"
#        -lC "\\ncsu1.uncanet.unca.edu\home\jchesebr\Desktop\Project
#        04\Debug\List" -o
#        "\\ncsu1.uncanet.unca.edu\home\jchesebr\Desktop\Project 04\Debug\Obj"
#        --debug -D__MSP430FR5994__ -e --double=32 --dlib_config "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -Oh
#        --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        \\ncsu1.uncanet.unca.edu\home\jchesebr\Desktop\Project
#        04\Debug\List\main.lst
#    Object file   =  
#        \\ncsu1.uncanet.unca.edu\home\jchesebr\Desktop\Project
#        04\Debug\Obj\main.r43
#
###############################################################################

\\ncsu1.uncanet.unca.edu\home\jchesebr\Desktop\Project 04\main.c
      1          //J Barrett Chesebrough
      2          //main.c
      3          //ya main c bby
      4          
      5          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
      6          #include  "functions.h"
      7          #include <string.h>
      8          #include "macros.h"
      9          
     10          #define RESET_STATE             (0)
     11          #define ALWAYS                  (1)
     12          #define RED_LED              (0x01) // RED LED 0
     13          #define GRN_LED              (0x02) // GREEN LED 1
     14          
     15          
     16          
     17          // Global Variables
     18          extern char pwm;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     20          extern char display_line[4][11];
     21          extern char *display[4];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     23          extern volatile unsigned char display_changed;
     24          extern volatile unsigned int update_display_count;
     25          extern volatile unsigned char update_display;
     26          extern volatile unsigned int Time_Sequence;
     27          extern volatile char one_time;
     28          //project 4 globals
     29          extern char Last_Time_Sequence;
     30          extern char cycle_time;
     31          extern char time_change;
     32          extern volatile char state;
     33          extern volatile char event;
     34          

   \                                 In  segment CODE, align 2
     35          void main(void)
   \                     main:
     36          {
     37          // Main Program
     38          // This is the main routine for the program. Execution of code starts here.
     39          // The operating system is Back Ground Fore Ground.
     40          
     41          
     42            Init_Ports();      
   \   000000   ........     CALLA   #Init_Ports
     43          // Disable the GPIO power-on default high-impedance mode to activate
     44          // previously configured port settings
     45            PM5CTL0 &= ~LOCKLPM5;
   \   000004   92C33001     BIC.W   #0x1, &0x130
     46            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     47            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     48            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     49          
     50            Init_SPI_B1();                       // Initialize SPI Bus
   \   000014   ........     CALLA   #Init_SPI_B1
     51            Init_LCD();                          // Initialize LCD
   \   000018   ........     CALLA   #Init_LCD
     52            five_msec_sleep(2);                  // 375 msec delay for the clock to settle
   \   00001C   2C43         MOV.W   #0x2, R12
   \   00001E   ........     CALLA   #five_msec_sleep
     53            Init_Switches();                     // Initialize Switches
   \   000022   ........     CALLA   #Init_Switches
     54          
     55            five_msec_sleep(2);
   \   000026   2C43         MOV.W   #0x2, R12
   \   000028   ........     CALLA   #five_msec_sleep
     56            display_mode = ORIGINAL;
   \   00002C   C243....     MOV.B   #0x0, &display_mode
     57          
     58            strcpy(display_line[0], "   NCSU   ");
   \   000030   3D40....     MOV.W   #`?<Constant "   NCSU   ">`, R13
   \   000034   3C40....     MOV.W   #display_line, R12
   \   000038   ........     CALLA   #strcpy
     59            update_string(display_line[0], 0);
   \   00003C   0D43         MOV.W   #0x0, R13
   \   00003E   ........     CALLA   #update_string
     60            strcpy(display_line[1], " WOLFPACK ");
   \   000042   3D40....     MOV.W   #`?<Constant " WOLFPACK ">`, R13
   \   000046   3C40....     MOV.W   #display_line + 11, R12
   \   00004A   ........     CALLA   #strcpy
     61            update_string(display_line[1], 1);
   \   00004E   1D43         MOV.W   #0x1, R13
   \   000050   3C40....     MOV.W   #display_line + 11, R12
   \   000054   ........     CALLA   #update_string
     62            strcpy(display_line[2], " ECE-306  ");
   \   000058   3D40....     MOV.W   #`?<Constant " ECE-306  ">`, R13
   \   00005C   3C40....     MOV.W   #display_line + 22, R12
   \   000060   ........     CALLA   #strcpy
     63            update_string(display_line[3], 3);
   \   000064   3D400300     MOV.W   #0x3, R13
   \   000068   3C40....     MOV.W   #display_line + 33, R12
   \   00006C   ........     CALLA   #update_string
     64            enable_display_update();
   \   000070   ........     CALLA   #enable_display_update
   \   000074   0D3C         JMP     ??main_4
     65          
     66          
     67          // Begining of the while OS
     68          
     69            while(ALWAYS)                         // Can the Operating system run
     70            {
     71              if(Last_Time_Sequence != Time_Sequence)
     72              {
     73                Last_Time_Sequence = Time_Sequence;
     74                cycle_time++;
     75                time_change = 1;
     76              }
     77              switch(event)
     78              {
     79              case STRAIGHT:                      // Straight
     80                Run_Straight();
     81                break;
     82                
     83              case CIRCLE:                        // Circle
     84                Run_Circle();
     85                break;
     86                  
     87              case TRIANGLE:
     88                Run_Triangle();                   //Triangle
                       ^
Warning[Pe223]: function "Run_Triangle" declared implicitly
     89                break;
     90                  
     91              default: break;
     92              
     93              } 
     94          
     95              switch(Time_Sequence)
     96              {
     97                case 125:                        // 1000 msec
     98                  if(one_time)
     99                  {
    100                    Init_LEDs();                 // Initialize LEDs
    101                    lcd_BIG_mid();
    102                    display_changed = 1;
    103                    one_time = 0;
    104                  }
    105                  Time_Sequence = 0;             //
    106                  break;
    107                  
    108                case 100:                        // 1000 msec
    109                  if(one_time)
    110                  {
    111                    P1OUT |= GRN_LED;            // Change State of LED 5
    112                    one_time = 0;
    113                  }
    114                  break;
    115                  
    116                case 75:                         // 750 msec
    117                  if(one_time)
    118                  {
    119                    P1OUT |= RED_LED;            // Change State of LED 4
    120                    P1OUT &= ~GRN_LED;           // Change State of LED 5
    121                    one_time = 0;
    122                  }
    123                  break;
    124                  
    125                case 50:                         // 500 msec
    126                  if(one_time)
    127                  {
    128                    P1OUT |= GRN_LED;            // Change State of LED 5
    129                    lcd_4line();
    130                    display_changed = 1;
    131                    one_time = 0;
    132                  }
    133                  break;
    134                  
    135                case  25:                        // 250 msec
    136                  if(one_time)
   \                     ??main_0:
   \   000076   C293....     CMP.B   #0x0, &one_time
   \   00007A   0624         JEQ     ??main_1
    137                  {
    138                    P1OUT &= ~RED_LED;           // Change State of LED 4
   \   00007C   D2C30202     BIC.B   #0x1, &0x202
    139                    P1OUT &= ~GRN_LED;           // Change State of LED 5
   \                     ??main_6:
   \   000080   E2C30202     BIC.B   #0x2, &0x202
    140                    one_time = 0;
   \                     ??main_3:
   \   000084   C243....     MOV.B   #0x0, &one_time
    141                  }
    142                  break;   
    143                  
    144                default: break;
    145                
    146              }
    147              Switches_Process();                // Check for switch state change
   \                     ??main_1:
   \   000088   ........     CALLA   #Switches_Process
    148              Display_Process();
   \   00008C   ........     CALLA   #Display_Process
   \                     ??main_4:
   \   000090   5F42....     MOV.B   &Last_Time_Sequence, R15
   \   000094   1F92....     CMP.W   &Time_Sequence, R15
   \   000098   0824         JEQ     ??main_7
   \   00009A   1E42....     MOV.W   &Time_Sequence, R14
   \   00009E   C24E....     MOV.B   R14, &Last_Time_Sequence
   \   0000A2   D253....     ADD.B   #0x1, &cycle_time
   \   0000A6   D243....     MOV.B   #0x1, &time_change
   \                     ??main_7:
   \   0000AA   5E42....     MOV.B   &event, R14
   \   0000AE   7E804300     SUB.B   #0x43, R14
   \   0000B2   0924         JEQ     ??main_8
   \   0000B4   7E800900     SUB.B   #0x9, R14
   \   0000B8   0324         JEQ     ??main_9
   \   0000BA   7E82         SUB.B   #0x8, R14
   \   0000BC   0724         JEQ     ??main_10
   \   0000BE   083C         JMP     ??main_5
   \                     ??main_9:
   \   0000C0   ........     CALLA   #Run_Straight
   \   0000C4   053C         JMP     ??main_5
   \                     ??main_8:
   \   0000C6   ........     CALLA   #Run_Circle
   \   0000CA   023C         JMP     ??main_5
   \                     ??main_10:
   \   0000CC   ........     CALLA   #Run_Triangle
   \                     ??main_5:
   \   0000D0   1F42....     MOV.W   &Time_Sequence, R15
   \   0000D4   3F801900     SUB.W   #0x19, R15
   \   0000D8   CE27         JEQ     ??main_0
   \   0000DA   3F801900     SUB.W   #0x19, R15
   \   0000DE   2324         JEQ     ??main_11
   \   0000E0   3F801900     SUB.W   #0x19, R15
   \   0000E4   1A24         JEQ     ??main_12
   \   0000E6   3F801900     SUB.W   #0x19, R15
   \   0000EA   1124         JEQ     ??main_13
   \   0000EC   3F801900     SUB.W   #0x19, R15
   \   0000F0   CB23         JNE     ??main_1
   \   0000F2   C293....     CMP.B   #0x0, &one_time
   \   0000F6   0824         JEQ     ??main_14
   \   0000F8   ........     CALLA   #Init_LEDs
   \   0000FC   ........     CALLA   #lcd_BIG_mid
   \   000100   D243....     MOV.B   #0x1, &display_changed
   \   000104   C243....     MOV.B   #0x0, &one_time
   \                     ??main_14:
   \   000108   8243....     MOV.W   #0x0, &Time_Sequence
   \   00010C   BD3F         JMP     ??main_1
   \                     ??main_13:
   \   00010E   C293....     CMP.B   #0x0, &one_time
   \   000112   BA27         JEQ     ??main_1
   \   000114   E2D30202     BIS.B   #0x2, &0x202
   \   000118   B53F         JMP     ??main_3
   \                     ??main_12:
   \   00011A   C293....     CMP.B   #0x0, &one_time
   \   00011E   B427         JEQ     ??main_1
   \   000120   D2D30202     BIS.B   #0x1, &0x202
   \   000124   AD3F         JMP     ??main_6
   \                     ??main_11:
   \   000126   C293....     CMP.B   #0x0, &one_time
   \   00012A   AE27         JEQ     ??main_1
   \   00012C   E2D30202     BIS.B   #0x2, &0x202
   \   000130   ........     CALLA   #lcd_4line
   \   000134   D243....     MOV.B   #0x1, &display_changed
   \   000138   A53F         JMP     ??main_3
   \   00013A   0343         NOP
   \   00013C                REQUIRE _A_PM5CTL0_L
   \   00013C                REQUIRE _A_PAOUT_L
    149            }
    150          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   NCSU   ">`:
   \   000000   2020204E4353 DC8 "   NCSU   "
   \            5520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " WOLFPACK ">`:
   \   000000   20574F4C4650 DC8 " WOLFPACK "
   \            41434B2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " ECE-306  ">`:
   \   000000   204543452D33 DC8 " ECE-306  "
   \            3036202000  
    151          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_SPI_B1
        4   -> Init_Switches
        4   -> Init_Timers
        4   -> Run_Circle
        4   -> Run_Straight
        4   -> Run_Triangle
        4   -> Switches_Process
        4   -> enable_display_update
        4   -> five_msec_sleep
        4   -> lcd_4line
        4   -> lcd_BIG_mid
        4   -> strcpy
        4   -> update_string


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "   NCSU   ">
      11  ?<Constant " ECE-306  ">
      11  ?<Constant " WOLFPACK ">
       2  _A_PAOUT_L
       2  _A_PM5CTL0_L
       1  display_mode
     316  main
       1  slow_input_down

 
 316 bytes in segment CODE
   4 bytes in segment DATA16_AN
  33 bytes in segment DATA16_C
   2 bytes in segment DATA16_Z
 
 316 bytes of CODE  memory
  33 bytes of CONST memory
   2 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: 1
